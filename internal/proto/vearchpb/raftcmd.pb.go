// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raftcmd.proto

package vearchpb

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpType int32

const (
	OpType_CREATE  OpType = 0
	OpType_DELETE  OpType = 1
	OpType_REPLACE OpType = 2
	OpType_BULK    OpType = 3
	OpType_GET     OpType = 4
	OpType_SEARCH  OpType = 5
)

var OpType_name = map[int32]string{
	0: "CREATE",
	1: "DELETE",
	2: "REPLACE",
	3: "BULK",
	4: "GET",
	5: "SEARCH",
}

var OpType_value = map[string]int32{
	"CREATE":  0,
	"DELETE":  1,
	"REPLACE": 2,
	"BULK":    3,
	"GET":     4,
	"SEARCH":  5,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}

func (OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f60a713a5f09c5ba, []int{0}
}

type CmdType int32

const (
	CmdType_WRITE       CmdType = 0
	CmdType_UPDATESPACE CmdType = 1
	CmdType_FLUSH       CmdType = 2
	CmdType_SEARCHDEL   CmdType = 3
)

var CmdType_name = map[int32]string{
	0: "WRITE",
	1: "UPDATESPACE",
	2: "FLUSH",
	3: "SEARCHDEL",
}

var CmdType_value = map[string]int32{
	"WRITE":       0,
	"UPDATESPACE": 1,
	"FLUSH":       2,
	"SEARCHDEL":   3,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}

func (CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f60a713a5f09c5ba, []int{1}
}

type PartitionData struct {
	Type                 OpType               `protobuf:"varint,1,opt,name=type,proto3,enum=OpType" json:"type,omitempty"`
	PartitionID          uint32               `protobuf:"varint,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	MessageID            string               `protobuf:"bytes,3,opt,name=messageID,proto3" json:"messageID,omitempty"`
	Items                []*Item              `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	SearchRequest        *SearchRequest       `protobuf:"bytes,5,opt,name=search_request,json=searchRequest,proto3" json:"search_request,omitempty"`
	SearchResponse       *SearchResponse      `protobuf:"bytes,6,opt,name=search_response,json=searchResponse,proto3" json:"search_response,omitempty"`
	Data                 []byte               `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Err                  *Error               `protobuf:"bytes,8,opt,name=err,proto3" json:"err,omitempty"`
	SearchRequests       []*SearchRequest     `protobuf:"bytes,9,rep,name=search_requests,json=searchRequests,proto3" json:"search_requests,omitempty"`
	SearchResponses      []*SearchResponse    `protobuf:"bytes,10,rep,name=search_responses,json=searchResponses,proto3" json:"search_responses,omitempty"`
	DelNum               int32                `protobuf:"varint,11,opt,name=del_num,json=delNum,proto3" json:"del_num,omitempty"`
	DelByQueryResponse   *DelByQueryeResponse `protobuf:"bytes,12,opt,name=del_by_query_response,json=delByQueryResponse,proto3" json:"del_by_query_response,omitempty"`
	IndexRequest         *IndexRequest        `protobuf:"bytes,13,opt,name=index_request,json=indexRequest,proto3" json:"index_request,omitempty"`
	IndexResponse        *IndexResponse       `protobuf:"bytes,14,opt,name=index_response,json=indexResponse,proto3" json:"index_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PartitionData) Reset()      { *m = PartitionData{} }
func (*PartitionData) ProtoMessage() {}
func (*PartitionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60a713a5f09c5ba, []int{0}
}
func (m *PartitionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionData.Merge(m, src)
}
func (m *PartitionData) XXX_Size() int {
	return m.Size()
}
func (m *PartitionData) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionData.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionData proto.InternalMessageInfo

// *********************** Raft *********************** //
type UpdateSpace struct {
	Space                []byte   `protobuf:"bytes,1,opt,name=Space,proto3" json:"Space,omitempty"`
	Version              uint64   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSpace) Reset()      { *m = UpdateSpace{} }
func (*UpdateSpace) ProtoMessage() {}
func (*UpdateSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60a713a5f09c5ba, []int{1}
}
func (m *UpdateSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSpace.Merge(m, src)
}
func (m *UpdateSpace) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSpace.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSpace proto.InternalMessageInfo

type DocCmd struct {
	Type                 OpType   `protobuf:"varint,1,opt,name=type,proto3,enum=OpType" json:"type,omitempty"`
	Version              int64    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Slot                 uint32   `protobuf:"varint,5,opt,name=slot,proto3" json:"slot,omitempty"`
	Doc                  []byte   `protobuf:"bytes,7,opt,name=doc,proto3" json:"doc,omitempty"`
	Docs                 [][]byte `protobuf:"bytes,8,rep,name=docs,proto3" json:"docs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DocCmd) Reset()      { *m = DocCmd{} }
func (*DocCmd) ProtoMessage() {}
func (*DocCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60a713a5f09c5ba, []int{2}
}
func (m *DocCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocCmd.Merge(m, src)
}
func (m *DocCmd) XXX_Size() int {
	return m.Size()
}
func (m *DocCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DocCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DocCmd proto.InternalMessageInfo

type RaftCommand struct {
	Type                 CmdType         `protobuf:"varint,1,opt,name=type,proto3,enum=CmdType" json:"type,omitempty"`
	WriteCommand         *DocCmd         `protobuf:"bytes,2,opt,name=write_command,json=writeCommand,proto3" json:"write_command,omitempty"`
	UpdateSpace          *UpdateSpace    `protobuf:"bytes,3,opt,name=update_space,json=updateSpace,proto3" json:"update_space,omitempty"`
	SearchDelReq         *SearchRequest  `protobuf:"bytes,4,opt,name=search_del_req,json=searchDelReq,proto3" json:"search_del_req,omitempty"`
	SearchDelResp        *SearchResponse `protobuf:"bytes,5,opt,name=search_del_resp,json=searchDelResp,proto3" json:"search_del_resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RaftCommand) Reset()      { *m = RaftCommand{} }
func (*RaftCommand) ProtoMessage() {}
func (*RaftCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60a713a5f09c5ba, []int{3}
}
func (m *RaftCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftCommand.Merge(m, src)
}
func (m *RaftCommand) XXX_Size() int {
	return m.Size()
}
func (m *RaftCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftCommand.DiscardUnknown(m)
}

var xxx_messageInfo_RaftCommand proto.InternalMessageInfo

type SnapData struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapData) Reset()      { *m = SnapData{} }
func (*SnapData) ProtoMessage() {}
func (*SnapData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f60a713a5f09c5ba, []int{4}
}
func (m *SnapData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapData.Merge(m, src)
}
func (m *SnapData) XXX_Size() int {
	return m.Size()
}
func (m *SnapData) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapData.DiscardUnknown(m)
}

var xxx_messageInfo_SnapData proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("OpType", OpType_name, OpType_value)
	proto.RegisterEnum("CmdType", CmdType_name, CmdType_value)
	proto.RegisterType((*PartitionData)(nil), "PartitionData")
	proto.RegisterType((*UpdateSpace)(nil), "UpdateSpace")
	proto.RegisterType((*DocCmd)(nil), "DocCmd")
	proto.RegisterType((*RaftCommand)(nil), "RaftCommand")
	proto.RegisterType((*SnapData)(nil), "SnapData")
}

func init() { proto.RegisterFile("raftcmd.proto", fileDescriptor_f60a713a5f09c5ba) }

var fileDescriptor_f60a713a5f09c5ba = []byte{
	// 816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x8e, 0xe3, 0x44,
	0x10, 0x4e, 0x8f, 0xf3, 0x5b, 0xb6, 0x33, 0xa6, 0xb5, 0x08, 0x8b, 0x5d, 0x59, 0x56, 0x4e, 0xd1,
	0x0a, 0x3c, 0x52, 0x00, 0x81, 0x90, 0x10, 0xcc, 0xc4, 0x66, 0x27, 0x22, 0x82, 0xa1, 0x93, 0x11,
	0x12, 0x97, 0xc8, 0xb1, 0x7b, 0xb2, 0x16, 0x71, 0xda, 0xd3, 0x6d, 0x0f, 0xe4, 0xc6, 0x63, 0xf0,
	0x08, 0x3c, 0x02, 0x47, 0x8e, 0x7b, 0xe4, 0xc8, 0x71, 0x13, 0x6e, 0x9c, 0x38, 0xc2, 0x0d, 0x75,
	0xdb, 0xc9, 0x7a, 0x76, 0x10, 0xb7, 0xfa, 0xbe, 0xae, 0xaa, 0xae, 0x9f, 0xaf, 0x1b, 0x4c, 0x1e,
	0xde, 0xe4, 0x51, 0x1a, 0x7b, 0x19, 0x67, 0x39, 0x7b, 0xdb, 0xa0, 0x9c, 0x33, 0x2e, 0x2a, 0x64,
	0xc5, 0x61, 0x1e, 0x2e, 0x52, 0x16, 0xd3, 0x75, 0xc5, 0xbc, 0xc1, 0x59, 0x91, 0x53, 0xbe, 0x58,
	0xf1, 0x2c, 0xaa, 0xa8, 0x77, 0x57, 0x49, 0xfe, 0xbc, 0x58, 0x7a, 0x11, 0x4b, 0xcf, 0x56, 0x6c,
	0xc5, 0xce, 0x14, 0xbd, 0x2c, 0x6e, 0x14, 0x52, 0x40, 0x59, 0xa5, 0xfb, 0xe0, 0xcf, 0x26, 0x98,
	0x57, 0x21, 0xcf, 0x93, 0x3c, 0x61, 0x1b, 0x3f, 0xcc, 0x43, 0xfc, 0x18, 0x9a, 0xf9, 0x36, 0xa3,
	0x36, 0x72, 0xd1, 0xb0, 0x3f, 0xea, 0x78, 0x5f, 0x65, 0xf3, 0x6d, 0x46, 0x89, 0x22, 0xb1, 0x0b,
	0x7a, 0x76, 0xf0, 0x9e, 0xf8, 0xf6, 0x89, 0x8b, 0x86, 0x26, 0xa9, 0x53, 0xf8, 0x09, 0xf4, 0x52,
	0x2a, 0x44, 0xb8, 0xa2, 0x13, 0xdf, 0xd6, 0x5c, 0x34, 0xec, 0x91, 0x57, 0x04, 0x7e, 0x0c, 0xad,
	0x24, 0xa7, 0xa9, 0xb0, 0x9b, 0xae, 0x36, 0xd4, 0x47, 0x2d, 0x6f, 0x92, 0xd3, 0x94, 0x94, 0x1c,
	0xfe, 0x00, 0xfa, 0x82, 0x86, 0x3c, 0x7a, 0xbe, 0xe0, 0xf4, 0xb6, 0xa0, 0x22, 0xb7, 0x5b, 0x2e,
	0x1a, 0xea, 0xa3, 0xbe, 0x37, 0x53, 0x34, 0x29, 0x59, 0x62, 0x8a, 0x3a, 0xc4, 0x1f, 0xc1, 0xe9,
	0x31, 0x4c, 0x64, 0x6c, 0x23, 0xa8, 0xdd, 0x56, 0x71, 0xa7, 0xc7, 0xb8, 0x92, 0x26, 0x7d, 0x71,
	0x0f, 0x63, 0x0c, 0x4d, 0x39, 0x52, 0xbb, 0xe3, 0xa2, 0xa1, 0x41, 0x94, 0x8d, 0x6d, 0xd0, 0x28,
	0xe7, 0x76, 0x57, 0x65, 0x68, 0x7b, 0x81, 0x5c, 0x00, 0x91, 0x14, 0xfe, 0xb0, 0x76, 0x8f, 0xba,
	0x59, 0xd8, 0x3d, 0xd5, 0xc5, 0xeb, 0xf5, 0xf5, 0xef, 0xd5, 0x27, 0xf0, 0xc7, 0x60, 0xbd, 0x56,
	0xa0, 0xb0, 0x41, 0x45, 0x3e, 0xa8, 0xf0, 0xf4, 0x7e, 0x85, 0x02, 0xbf, 0x05, 0x9d, 0x98, 0xae,
	0x17, 0x9b, 0x22, 0xb5, 0x75, 0x17, 0x0d, 0x5b, 0xa4, 0x1d, 0xd3, 0xf5, 0x97, 0x45, 0x8a, 0x9f,
	0xc1, 0x9b, 0xf2, 0x60, 0xb9, 0x5d, 0xdc, 0x16, 0x94, 0x6f, 0x5f, 0xf5, 0x6e, 0xa8, 0xca, 0x1f,
	0x79, 0x3e, 0x5d, 0x5f, 0x6c, 0xbf, 0x96, 0x67, 0xf4, 0x98, 0x1e, 0xc7, 0x47, 0xf2, 0x38, 0x84,
	0x11, 0x98, 0xc9, 0x26, 0xa6, 0x3f, 0x1c, 0x87, 0x6e, 0xaa, 0x04, 0xa6, 0x37, 0x91, 0xec, 0xa1,
	0x27, 0x23, 0xa9, 0x21, 0xb9, 0xa9, 0x43, 0x4c, 0x75, 0x6b, 0xbf, 0xda, 0x54, 0x15, 0x54, 0xdd,
	0x67, 0x26, 0x75, 0x38, 0xf8, 0x04, 0xf4, 0xeb, 0x2c, 0x0e, 0x73, 0x3a, 0xcb, 0xc2, 0x88, 0xe2,
	0x47, 0xd0, 0x52, 0x86, 0x92, 0x9a, 0x41, 0x4a, 0x80, 0x6d, 0xe8, 0xdc, 0x51, 0x2e, 0x12, 0xb6,
	0x51, 0xf2, 0x6a, 0x92, 0x03, 0x1c, 0x6c, 0xa1, 0xed, 0xb3, 0x68, 0x9c, 0xc6, 0xff, 0xaf, 0xd1,
	0x5a, 0x02, 0xa9, 0x3f, 0xed, 0x98, 0x40, 0xee, 0x5b, 0xac, 0x59, 0x29, 0x2b, 0x93, 0x28, 0x1b,
	0x5b, 0xa0, 0xc5, 0x2c, 0xaa, 0x24, 0x20, 0x4d, 0xa5, 0x0a, 0x16, 0x09, 0xbb, 0xeb, 0x6a, 0x4a,
	0x15, 0x2c, 0x12, 0x83, 0x7f, 0x10, 0xe8, 0x24, 0xbc, 0xc9, 0xc7, 0x2c, 0x4d, 0xc3, 0x4d, 0x8c,
	0x9f, 0xdc, 0x2b, 0xa0, 0xeb, 0x8d, 0xd3, 0xb8, 0x56, 0xc1, 0x3b, 0x60, 0x7e, 0xcf, 0x93, 0x9c,
	0x2e, 0xa2, 0xd2, 0x5d, 0x35, 0xa2, 0x8f, 0x3a, 0x5e, 0x59, 0x3e, 0x31, 0xd4, 0xe9, 0x21, 0xd7,
	0x19, 0x18, 0x85, 0x9a, 0xca, 0x42, 0xa8, 0x69, 0x68, 0xca, 0xd9, 0xf0, 0x6a, 0xa3, 0x22, 0x7a,
	0x51, 0x9b, 0xdb, 0xfb, 0xc7, 0x77, 0x22, 0x15, 0xc0, 0xe9, 0xad, 0xdd, 0xfc, 0xcf, 0x77, 0x62,
	0x94, 0x5e, 0x3e, 0x5d, 0x13, 0x7a, 0x5b, 0x93, 0x6f, 0x19, 0x25, 0xb2, 0xea, 0x79, 0x3d, 0x10,
	0xa1, 0x59, 0x8b, 0x13, 0xd9, 0x60, 0x04, 0xdd, 0xd9, 0x26, 0xcc, 0xd4, 0xe7, 0x60, 0x81, 0xf6,
	0x1d, 0xdd, 0x56, 0x0b, 0x93, 0xa6, 0x5c, 0xe2, 0x5d, 0xb8, 0x2e, 0xa8, 0xea, 0xd1, 0x20, 0x25,
	0x78, 0x3a, 0x85, 0x76, 0xb9, 0x13, 0x0c, 0xd0, 0x1e, 0x93, 0xe0, 0x7c, 0x1e, 0x58, 0x0d, 0x69,
	0xfb, 0xc1, 0x34, 0x98, 0x07, 0x16, 0xc2, 0x3a, 0x74, 0x48, 0x70, 0x35, 0x3d, 0x1f, 0x07, 0xd6,
	0x09, 0xee, 0x42, 0xf3, 0xe2, 0x7a, 0xfa, 0x85, 0xa5, 0xe1, 0x0e, 0x68, 0xcf, 0x82, 0xb9, 0xd5,
	0x94, 0xbe, 0xb3, 0xe0, 0x9c, 0x8c, 0x2f, 0xad, 0xd6, 0xd3, 0x4f, 0xa1, 0x53, 0x0d, 0x18, 0xf7,
	0xa0, 0xf5, 0x0d, 0x99, 0xa8, 0x6c, 0xa7, 0xa0, 0x5f, 0x5f, 0xf9, 0xe7, 0xf3, 0x60, 0x76, 0x25,
	0xb3, 0x20, 0x79, 0xf6, 0xf9, 0xf4, 0x7a, 0x76, 0x69, 0x9d, 0x60, 0x13, 0x7a, 0x65, 0xb4, 0x1f,
	0x4c, 0x2d, 0xed, 0xe2, 0xb3, 0x17, 0x3b, 0xa7, 0xf1, 0xfb, 0xce, 0x69, 0xbc, 0xdc, 0x39, 0x8d,
	0xbf, 0x76, 0x4e, 0xe3, 0xef, 0x9d, 0x83, 0x7e, 0xdc, 0x3b, 0xe8, 0xe7, 0xbd, 0x83, 0x7e, 0xd9,
	0x3b, 0x8d, 0x5f, 0xf7, 0x4e, 0xe3, 0xc5, 0xde, 0x41, 0xbf, 0xed, 0x1d, 0xf4, 0x72, 0xef, 0xa0,
	0x9f, 0xfe, 0x70, 0x1a, 0x97, 0xe8, 0xdb, 0xee, 0x9d, 0x9a, 0x44, 0xb6, 0x5c, 0xb6, 0xd5, 0x77,
	0xf9, 0xde, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0xf7, 0x42, 0x08, 0xa1, 0x05, 0x00, 0x00,
}

func (this *PartitionData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitionData)
	if !ok {
		that2, ok := that.(PartitionData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.PartitionID != that1.PartitionID {
		return false
	}
	if this.MessageID != that1.MessageID {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !this.SearchRequest.Equal(that1.SearchRequest) {
		return false
	}
	if !this.SearchResponse.Equal(that1.SearchResponse) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !this.Err.Equal(that1.Err) {
		return false
	}
	if len(this.SearchRequests) != len(that1.SearchRequests) {
		return false
	}
	for i := range this.SearchRequests {
		if !this.SearchRequests[i].Equal(that1.SearchRequests[i]) {
			return false
		}
	}
	if len(this.SearchResponses) != len(that1.SearchResponses) {
		return false
	}
	for i := range this.SearchResponses {
		if !this.SearchResponses[i].Equal(that1.SearchResponses[i]) {
			return false
		}
	}
	if this.DelNum != that1.DelNum {
		return false
	}
	if !this.DelByQueryResponse.Equal(that1.DelByQueryResponse) {
		return false
	}
	if !this.IndexRequest.Equal(that1.IndexRequest) {
		return false
	}
	if !this.IndexResponse.Equal(that1.IndexResponse) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateSpace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSpace)
	if !ok {
		that2, ok := that.(UpdateSpace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Space, that1.Space) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DocCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocCmd)
	if !ok {
		that2, ok := that.(DocCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if !bytes.Equal(this.Doc, that1.Doc) {
		return false
	}
	if len(this.Docs) != len(that1.Docs) {
		return false
	}
	for i := range this.Docs {
		if !bytes.Equal(this.Docs[i], that1.Docs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RaftCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftCommand)
	if !ok {
		that2, ok := that.(RaftCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.WriteCommand.Equal(that1.WriteCommand) {
		return false
	}
	if !this.UpdateSpace.Equal(that1.UpdateSpace) {
		return false
	}
	if !this.SearchDelReq.Equal(that1.SearchDelReq) {
		return false
	}
	if !this.SearchDelResp.Equal(that1.SearchDelResp) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SnapData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnapData)
	if !ok {
		that2, ok := that.(SnapData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *PartitionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IndexResponse != nil {
		{
			size, err := m.IndexResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.IndexRequest != nil {
		{
			size, err := m.IndexRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.DelByQueryResponse != nil {
		{
			size, err := m.DelByQueryResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.DelNum != 0 {
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.DelNum))
		i--
		dAtA[i] = 0x58
	}
	if len(m.SearchResponses) > 0 {
		for iNdEx := len(m.SearchResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SearchResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftcmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.SearchRequests) > 0 {
		for iNdEx := len(m.SearchRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SearchRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftcmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SearchResponse != nil {
		{
			size, err := m.SearchResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SearchRequest != nil {
		{
			size, err := m.SearchRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftcmd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MessageID) > 0 {
		i -= len(m.MessageID)
		copy(dAtA[i:], m.MessageID)
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.MessageID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PartitionID != 0 {
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.PartitionID))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Version != 0 {
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Space) > 0 {
		i -= len(m.Space)
		copy(dAtA[i:], m.Space)
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Space)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DocCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Docs) > 0 {
		for iNdEx := len(m.Docs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Docs[iNdEx])
			copy(dAtA[i:], m.Docs[iNdEx])
			i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Docs[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Doc) > 0 {
		i -= len(m.Doc)
		copy(dAtA[i:], m.Doc)
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Doc)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Slot != 0 {
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x28
	}
	if m.Version != 0 {
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RaftCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SearchDelResp != nil {
		{
			size, err := m.SearchDelResp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SearchDelReq != nil {
		{
			size, err := m.SearchDelReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UpdateSpace != nil {
		{
			size, err := m.UpdateSpace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WriteCommand != nil {
		{
			size, err := m.WriteCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRaftcmd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SnapData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRaftcmd(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftcmd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPartitionData(r randyRaftcmd, easy bool) *PartitionData {
	this := &PartitionData{}
	this.Type = OpType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	this.PartitionID = uint32(r.Uint32())
	this.MessageID = string(randStringRaftcmd(r))
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Items = make([]*Item, v1)
		for i := 0; i < v1; i++ {
			this.Items[i] = NewPopulatedItem(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.SearchRequest = NewPopulatedSearchRequest(r, easy)
	}
	if r.Intn(5) != 0 {
		this.SearchResponse = NewPopulatedSearchResponse(r, easy)
	}
	v2 := r.Intn(100)
	this.Data = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.Err = NewPopulatedError(r, easy)
	}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.SearchRequests = make([]*SearchRequest, v3)
		for i := 0; i < v3; i++ {
			this.SearchRequests[i] = NewPopulatedSearchRequest(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.SearchResponses = make([]*SearchResponse, v4)
		for i := 0; i < v4; i++ {
			this.SearchResponses[i] = NewPopulatedSearchResponse(r, easy)
		}
	}
	this.DelNum = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.DelNum *= -1
	}
	if r.Intn(5) != 0 {
		this.DelByQueryResponse = NewPopulatedDelByQueryeResponse(r, easy)
	}
	if r.Intn(5) != 0 {
		this.IndexRequest = NewPopulatedIndexRequest(r, easy)
	}
	if r.Intn(5) != 0 {
		this.IndexResponse = NewPopulatedIndexResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRaftcmd(r, 15)
	}
	return this
}

func NewPopulatedUpdateSpace(r randyRaftcmd, easy bool) *UpdateSpace {
	this := &UpdateSpace{}
	v5 := r.Intn(100)
	this.Space = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Space[i] = byte(r.Intn(256))
	}
	this.Version = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRaftcmd(r, 3)
	}
	return this
}

func NewPopulatedDocCmd(r randyRaftcmd, easy bool) *DocCmd {
	this := &DocCmd{}
	this.Type = OpType([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	this.Version = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Version *= -1
	}
	this.Slot = uint32(r.Uint32())
	v6 := r.Intn(100)
	this.Doc = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Doc[i] = byte(r.Intn(256))
	}
	v7 := r.Intn(10)
	this.Docs = make([][]byte, v7)
	for i := 0; i < v7; i++ {
		v8 := r.Intn(100)
		this.Docs[i] = make([]byte, v8)
		for j := 0; j < v8; j++ {
			this.Docs[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRaftcmd(r, 9)
	}
	return this
}

func NewPopulatedRaftCommand(r randyRaftcmd, easy bool) *RaftCommand {
	this := &RaftCommand{}
	this.Type = CmdType([]int32{0, 1, 2, 3}[r.Intn(4)])
	if r.Intn(5) != 0 {
		this.WriteCommand = NewPopulatedDocCmd(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdateSpace = NewPopulatedUpdateSpace(r, easy)
	}
	if r.Intn(5) != 0 {
		this.SearchDelReq = NewPopulatedSearchRequest(r, easy)
	}
	if r.Intn(5) != 0 {
		this.SearchDelResp = NewPopulatedSearchResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRaftcmd(r, 6)
	}
	return this
}

func NewPopulatedSnapData(r randyRaftcmd, easy bool) *SnapData {
	this := &SnapData{}
	v9 := r.Intn(100)
	this.Key = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	v10 := r.Intn(100)
	this.Value = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRaftcmd(r, 3)
	}
	return this
}

type randyRaftcmd interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRaftcmd(r randyRaftcmd) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRaftcmd(r randyRaftcmd) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneRaftcmd(r)
	}
	return string(tmps)
}
func randUnrecognizedRaftcmd(r randyRaftcmd, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRaftcmd(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRaftcmd(dAtA []byte, r randyRaftcmd, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRaftcmd(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PartitionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRaftcmd(uint64(m.Type))
	}
	if m.PartitionID != 0 {
		n += 1 + sovRaftcmd(uint64(m.PartitionID))
	}
	l = len(m.MessageID)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovRaftcmd(uint64(l))
		}
	}
	if m.SearchRequest != nil {
		l = m.SearchRequest.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.SearchResponse != nil {
		l = m.SearchResponse.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if len(m.SearchRequests) > 0 {
		for _, e := range m.SearchRequests {
			l = e.Size()
			n += 1 + l + sovRaftcmd(uint64(l))
		}
	}
	if len(m.SearchResponses) > 0 {
		for _, e := range m.SearchResponses {
			l = e.Size()
			n += 1 + l + sovRaftcmd(uint64(l))
		}
	}
	if m.DelNum != 0 {
		n += 1 + sovRaftcmd(uint64(m.DelNum))
	}
	if m.DelByQueryResponse != nil {
		l = m.DelByQueryResponse.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.IndexRequest != nil {
		l = m.IndexRequest.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.IndexResponse != nil {
		l = m.IndexResponse.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Space)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovRaftcmd(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DocCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRaftcmd(uint64(m.Type))
	}
	if m.Version != 0 {
		n += 1 + sovRaftcmd(uint64(m.Version))
	}
	if m.Slot != 0 {
		n += 1 + sovRaftcmd(uint64(m.Slot))
	}
	l = len(m.Doc)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if len(m.Docs) > 0 {
		for _, b := range m.Docs {
			l = len(b)
			n += 1 + l + sovRaftcmd(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRaftcmd(uint64(m.Type))
	}
	if m.WriteCommand != nil {
		l = m.WriteCommand.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.UpdateSpace != nil {
		l = m.UpdateSpace.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.SearchDelReq != nil {
		l = m.SearchDelReq.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.SearchDelResp != nil {
		l = m.SearchDelResp.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftcmd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftcmd(x uint64) (n int) {
	return sovRaftcmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PartitionData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*Item{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(fmt.Sprintf("%v", f), "Item", "Item", 1) + ","
	}
	repeatedStringForItems += "}"
	repeatedStringForSearchRequests := "[]*SearchRequest{"
	for _, f := range this.SearchRequests {
		repeatedStringForSearchRequests += strings.Replace(fmt.Sprintf("%v", f), "SearchRequest", "SearchRequest", 1) + ","
	}
	repeatedStringForSearchRequests += "}"
	repeatedStringForSearchResponses := "[]*SearchResponse{"
	for _, f := range this.SearchResponses {
		repeatedStringForSearchResponses += strings.Replace(fmt.Sprintf("%v", f), "SearchResponse", "SearchResponse", 1) + ","
	}
	repeatedStringForSearchResponses += "}"
	s := strings.Join([]string{`&PartitionData{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`PartitionID:` + fmt.Sprintf("%v", this.PartitionID) + `,`,
		`MessageID:` + fmt.Sprintf("%v", this.MessageID) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`SearchRequest:` + strings.Replace(fmt.Sprintf("%v", this.SearchRequest), "SearchRequest", "SearchRequest", 1) + `,`,
		`SearchResponse:` + strings.Replace(fmt.Sprintf("%v", this.SearchResponse), "SearchResponse", "SearchResponse", 1) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Err:` + strings.Replace(fmt.Sprintf("%v", this.Err), "Error", "Error", 1) + `,`,
		`SearchRequests:` + repeatedStringForSearchRequests + `,`,
		`SearchResponses:` + repeatedStringForSearchResponses + `,`,
		`DelNum:` + fmt.Sprintf("%v", this.DelNum) + `,`,
		`DelByQueryResponse:` + strings.Replace(fmt.Sprintf("%v", this.DelByQueryResponse), "DelByQueryeResponse", "DelByQueryeResponse", 1) + `,`,
		`IndexRequest:` + strings.Replace(fmt.Sprintf("%v", this.IndexRequest), "IndexRequest", "IndexRequest", 1) + `,`,
		`IndexResponse:` + strings.Replace(fmt.Sprintf("%v", this.IndexResponse), "IndexResponse", "IndexResponse", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSpace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSpace{`,
		`Space:` + fmt.Sprintf("%v", this.Space) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocCmd{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Doc:` + fmt.Sprintf("%v", this.Doc) + `,`,
		`Docs:` + fmt.Sprintf("%v", this.Docs) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftCommand{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`WriteCommand:` + strings.Replace(this.WriteCommand.String(), "DocCmd", "DocCmd", 1) + `,`,
		`UpdateSpace:` + strings.Replace(this.UpdateSpace.String(), "UpdateSpace", "UpdateSpace", 1) + `,`,
		`SearchDelReq:` + strings.Replace(fmt.Sprintf("%v", this.SearchDelReq), "SearchRequest", "SearchRequest", 1) + `,`,
		`SearchDelResp:` + strings.Replace(fmt.Sprintf("%v", this.SearchDelResp), "SearchResponse", "SearchResponse", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnapData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnapData{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRaftcmd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PartitionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchRequest == nil {
				m.SearchRequest = &SearchRequest{}
			}
			if err := m.SearchRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchResponse == nil {
				m.SearchResponse = &SearchResponse{}
			}
			if err := m.SearchResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &Error{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchRequests = append(m.SearchRequests, &SearchRequest{})
			if err := m.SearchRequests[len(m.SearchRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchResponses = append(m.SearchResponses, &SearchResponse{})
			if err := m.SearchResponses[len(m.SearchResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelNum", wireType)
			}
			m.DelNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelByQueryResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelByQueryResponse == nil {
				m.DelByQueryResponse = &DelByQueryeResponse{}
			}
			if err := m.DelByQueryResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexRequest == nil {
				m.IndexRequest = &IndexRequest{}
			}
			if err := m.IndexRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexResponse == nil {
				m.IndexResponse = &IndexResponse{}
			}
			if err := m.IndexResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Space = append(m.Space[:0], dAtA[iNdEx:postIndex]...)
			if m.Space == nil {
				m.Space = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OpType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Doc = append(m.Doc[:0], dAtA[iNdEx:postIndex]...)
			if m.Doc == nil {
				m.Doc = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = append(m.Docs, make([]byte, postIndex-iNdEx))
			copy(m.Docs[len(m.Docs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WriteCommand == nil {
				m.WriteCommand = &DocCmd{}
			}
			if err := m.WriteCommand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSpace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateSpace == nil {
				m.UpdateSpace = &UpdateSpace{}
			}
			if err := m.UpdateSpace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchDelReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchDelReq == nil {
				m.SearchDelReq = &SearchRequest{}
			}
			if err := m.SearchDelReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchDelResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchDelResp == nil {
				m.SearchDelResp = &SearchResponse{}
			}
			if err := m.SearchDelResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftcmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftcmd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftcmd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftcmd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftcmd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftcmd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftcmd = fmt.Errorf("proto: unexpected end of group")
)
