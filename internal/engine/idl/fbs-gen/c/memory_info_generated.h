// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MEMORYINFO_GAMMA_API_H_
#define FLATBUFFERS_GENERATED_MEMORYINFO_GAMMA_API_H_

#include "flatbuffers/flatbuffers.h"

namespace gamma_api {

struct MemoryInfo;

struct MemoryInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TABLE_MEM = 4,
    VT_INDEX_MEM = 6,
    VT_VECTOR_MEM = 8,
    VT_FIELD_RANGE_MEM = 10,
    VT_BITMAP_MEM = 12
  };
  int64_t table_mem() const {
    return GetField<int64_t>(VT_TABLE_MEM, 0);
  }
  int64_t index_mem() const {
    return GetField<int64_t>(VT_INDEX_MEM, 0);
  }
  int64_t vector_mem() const {
    return GetField<int64_t>(VT_VECTOR_MEM, 0);
  }
  int64_t field_range_mem() const {
    return GetField<int64_t>(VT_FIELD_RANGE_MEM, 0);
  }
  int64_t bitmap_mem() const {
    return GetField<int64_t>(VT_BITMAP_MEM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_TABLE_MEM) &&
           VerifyField<int64_t>(verifier, VT_INDEX_MEM) &&
           VerifyField<int64_t>(verifier, VT_VECTOR_MEM) &&
           VerifyField<int64_t>(verifier, VT_FIELD_RANGE_MEM) &&
           VerifyField<int64_t>(verifier, VT_BITMAP_MEM) &&
           verifier.EndTable();
  }
};

struct MemoryInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_table_mem(int64_t table_mem) {
    fbb_.AddElement<int64_t>(MemoryInfo::VT_TABLE_MEM, table_mem, 0);
  }
  void add_index_mem(int64_t index_mem) {
    fbb_.AddElement<int64_t>(MemoryInfo::VT_INDEX_MEM, index_mem, 0);
  }
  void add_vector_mem(int64_t vector_mem) {
    fbb_.AddElement<int64_t>(MemoryInfo::VT_VECTOR_MEM, vector_mem, 0);
  }
  void add_field_range_mem(int64_t field_range_mem) {
    fbb_.AddElement<int64_t>(MemoryInfo::VT_FIELD_RANGE_MEM, field_range_mem, 0);
  }
  void add_bitmap_mem(int64_t bitmap_mem) {
    fbb_.AddElement<int64_t>(MemoryInfo::VT_BITMAP_MEM, bitmap_mem, 0);
  }
  explicit MemoryInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MemoryInfoBuilder &operator=(const MemoryInfoBuilder &);
  flatbuffers::Offset<MemoryInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MemoryInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<MemoryInfo> CreateMemoryInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t table_mem = 0,
    int64_t index_mem = 0,
    int64_t vector_mem = 0,
    int64_t field_range_mem = 0,
    int64_t bitmap_mem = 0) {
  MemoryInfoBuilder builder_(_fbb);
  builder_.add_bitmap_mem(bitmap_mem);
  builder_.add_field_range_mem(field_range_mem);
  builder_.add_vector_mem(vector_mem);
  builder_.add_index_mem(index_mem);
  builder_.add_table_mem(table_mem);
  return builder_.Finish();
}

inline const gamma_api::MemoryInfo *GetMemoryInfo(const void *buf) {
  return flatbuffers::GetRoot<gamma_api::MemoryInfo>(buf);
}

inline const gamma_api::MemoryInfo *GetSizePrefixedMemoryInfo(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gamma_api::MemoryInfo>(buf);
}

inline bool VerifyMemoryInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gamma_api::MemoryInfo>(nullptr);
}

inline bool VerifySizePrefixedMemoryInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gamma_api::MemoryInfo>(nullptr);
}

inline void FinishMemoryInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gamma_api::MemoryInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMemoryInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gamma_api::MemoryInfo> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace gamma_api

#endif  // FLATBUFFERS_GENERATED_MEMORYINFO_GAMMA_API_H_
